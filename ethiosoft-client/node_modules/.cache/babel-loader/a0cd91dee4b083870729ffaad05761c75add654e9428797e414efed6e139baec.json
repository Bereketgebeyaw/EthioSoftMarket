{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5164/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to convert role string to number\nconst convertRoleToNumber = role => {\n  switch (role) {\n    case 'Admin':\n      return 0;\n    case 'Seller':\n      return 1;\n    case 'Buyer':\n      return 2;\n    default:\n      return 2;\n    // Default to Buyer\n  }\n};\nexport const authService = {\n  register: async data => {\n    // Convert role string to number\n    const requestData = {\n      ...data,\n      role: convertRoleToNumber(data.role)\n    };\n    const response = await api.post('/auth/register', requestData);\n    return response.data;\n  },\n  login: async data => {\n    const response = await api.post('/auth/login', data);\n    return response.data;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","convertRoleToNumber","role","authService","register","data","requestData","post","login","getCurrentUser","get","logout"],"sources":["/Users/mac/Desktop/EthioSoft-Marketplace/ethiosoft-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5164/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to convert role string to number\nconst convertRoleToNumber = (role) => {\n  switch (role) {\n    case 'Admin': return 0;\n    case 'Seller': return 1;\n    case 'Buyer': return 2;\n    default: return 2; // Default to Buyer\n  }\n};\n\nexport const authService = {\n  register: async (data) => {\n    // Convert role string to number\n    const requestData = {\n      ...data,\n      role: convertRoleToNumber(data.role)\n    };\n    const response = await api.post('/auth/register', requestData);\n    return response.data;\n  },\n\n  login: async (data) => {\n    const response = await api.post('/auth/login', data);\n    return response.data;\n  },\n\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,MAAMU,mBAAmB,GAAIC,IAAI,IAAK;EACpC,QAAQA,IAAI;IACV,KAAK,OAAO;MAAE,OAAO,CAAC;IACtB,KAAK,QAAQ;MAAE,OAAO,CAAC;IACvB,KAAK,OAAO;MAAE,OAAO,CAAC;IACtB;MAAS,OAAO,CAAC;IAAE;EACrB;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG;EACzBC,QAAQ,EAAE,MAAOC,IAAI,IAAK;IACxB;IACA,MAAMC,WAAW,GAAG;MAClB,GAAGD,IAAI;MACPH,IAAI,EAAED,mBAAmB,CAACI,IAAI,CAACH,IAAI;IACrC,CAAC;IACD,MAAMR,QAAQ,GAAG,MAAMf,GAAG,CAAC4B,IAAI,CAAC,gBAAgB,EAAED,WAAW,CAAC;IAC9D,OAAOZ,QAAQ,CAACW,IAAI;EACtB,CAAC;EAEDG,KAAK,EAAE,MAAOH,IAAI,IAAK;IACrB,MAAMX,QAAQ,GAAG,MAAMf,GAAG,CAAC4B,IAAI,CAAC,aAAa,EAAEF,IAAI,CAAC;IACpD,OAAOX,QAAQ,CAACW,IAAI;EACtB,CAAC;EAEDI,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,MAAMf,QAAQ,GAAG,MAAMf,GAAG,CAAC+B,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOhB,QAAQ,CAACW,IAAI;EACtB,CAAC;EAEDM,MAAM,EAAEA,CAAA,KAAM;IACZvB,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC;AACF,CAAC;AAED,eAAelB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}